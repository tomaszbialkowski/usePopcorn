import { useEffect, useState, useRef } from "react";
import StarRating from "./starRating";
import { useMovies } from "./useMovies";
import { useLocalStorageState } from "./useLocalStorageState";
import { useKey } from "./useKey";

const average = (arr) =>
  arr.reduce((acc, cur, i, arr) => acc + cur / arr.length, 0);

const KEY = "55ca2044";

export default function App() {
  const [query, setQuery] = useState("");
  const [selectedId, setSelectedId] = useState(null);
  const { movies, isLoading, error } = useMovies(query); //uzycie customowego hooka

  const [watched, setWatched] = useLocalStorageState([], "watched");

  // const [watched, setWatched] = useState([]);
  // const [watched, setWatched] = useState(function () {
  //   const storedValue = localStorage.getItem("watched");
  //   return JSON.parse(storedValue);
  // }); //przeniesione do hook useLocalStorageState

  // nigdy nie r√≥b funkcji fetch ani nie ustawiaj state w top level code - bo spowodujesz nieko≈ÑczƒÖcƒÖ sie pƒôtle renderowania.
  // setState wewnƒÖtrz returna tak jak w przypdaku componentu Search a do fetcha uzywaj useEffect, kt√≥ry pozwala na bezpieczne pisanie kodu z sideeffect (kontakt ze ≈õwiatem zewnƒôtrznym np pobieranie danych z bazy danych lub ustawianie jaki≈õ zmiennych)

  function handleSelectMovie(id) {
    id === selectedId ? setSelectedId(null) : setSelectedId(id);
  }

  function handleCloseMovie() {
    setSelectedId(null);
  }

  function handleAddWatched(movie) {
    setWatched((watched) => [...watched, movie]);
    // poni≈ºej trzeba przekazaƒá tablicƒô z obejrzanymi filmami, jednak nie mo≈ºemy tego zrobiƒá po prostu jako watched bo nie ma tutaj dostƒôpu do zaktualizowanego stanu mimo ≈ºe robimy powy≈ºej setWatched, jednak ten stan w tym momencie bƒôdzie jeszcze stary "stale", nowy stan bƒôdzie dostƒôny po renderingu
    //w local storage przechowujemy pary klucz, warto≈õƒá - obie muszƒÖ byƒá typu string dlatego zamieniamy tablice na string z wykorzystaniem metody JSON.stringify()
    // poni≈ºsza instrukcja zostaje zakomentowana bo te funckjonalnosƒá przenios≈Çem do useEffect, to tylko przyk≈ÇƒÖd ≈ºe moze tu byƒá
    // localStorage.setItem("watched", JSON.stringify([...watched, movie]));
  }

  function handleDeleteWatchedMovie(id) {
    setWatched((watched) => watched.filter((movie) => movie.imdbID !== id));
  }

  return (
    <>
      <Navbar>
        <Logo />
        <Search query={query} setQuery={setQuery} />
        <Results movies={movies} />
      </Navbar>

      <Main>
        {/* <Box>{isLoading ? <Loader /> : <MoviesList movies={movies} />}</Box>  */}
        {/*# chcƒÖc do tej instrukcji dodaƒá za≈Ço≈ºenie wy≈õwietl b≈ÇƒÖd je≈õli co≈õ posz≈Ço nie tak powinni≈õmy przy niespe≈Çnieniu warunku isLoading dodaƒá "jesli wszytko jest OK wyswietl <MovieList> jesli co≈õ posz≈Ço nie tak wy≈õwietl blad. nie jest tp ≈Çadne i tƒô konstrukcjƒô zastƒÖpimy poni≈ºszƒÖ*/}
        <Box>
          {isLoading && <Loader />}
          {!isLoading && !error && (
            <MoviesList
              movies={movies}
              onSelectMovie={handleSelectMovie}
              onCloseMovie={handleCloseMovie}
            />
          )}
          {error && <ErrorMessage message={error} />}
        </Box>
        <Box>
          {selectedId ? (
            <>
              <MovieDetails
                selectedId={selectedId}
                onCloseMovie={handleCloseMovie}
                onAddWatched={handleAddWatched}
                watchedList={watched}
              />
              {/* <button className={btn}>$llpr;</button> */}
            </>
          ) : (
            <>
              <WatchedMoviesSummary watched={watched} />
              <WatchedMoviesList
                watched={watched}
                onDeleteWatchedMovie={handleDeleteWatchedMovie}
              />
            </>
          )}
        </Box>
      </Main>
    </>
  );
}

const Loader = () => <p className="loader">Loading...</p>;

const ErrorMessage = ({ message }) => (
  <p className="error">
    <span>üõë</span>
    {message}
    <span>üõë</span>
  </p>
);

function Navbar({ children }) {
  return <nav className="nav-bar">{children}</nav>;
}

// przyk≈Çad napisania componentu z uzyciem funkcji strza≈Çkowej
const Logo = () => (
  <div className="logo">
    <span role="img">üçø</span>
    <h1>usePopcorn</h1>
  </div>
);

function Search({ query, setQuery }) {
  const inputEl = useRef(null);

  useKey("enter", function () {
    if (document.activeElement === inputEl.current) return;

    inputEl.current.focus();
    setQuery("");
  });

  return (
    <input
      className="search"
      type="text"
      placeholder="Search movies..."
      value={query}
      onChange={(e) => setQuery(e.target.value)}
      ref={inputEl}
    />
  );
}

function Results({ movies }) {
  return (
    <p className="num-results">
      Found <strong>{movies ? movies.length : "NO"}</strong> results.
    </p>
  );
}

function Main({ children }) {
  return <main className="main">{children}</main>;
}

function Box({ children }) {
  const [isOpen, setIsOpen1] = useState(true);

  return (
    <div className="box">
      <button
        className="btn-toggle"
        onClick={() => setIsOpen1((open) => !open)}
      >
        {isOpen ? "‚Äì" : "+"}
      </button>
      {isOpen && children}
    </div>
  );
}

function MoviesList({ movies, onSelectMovie, onCloseMovie }) {
  return (
    <ul className="list list-movies">
      {movies?.map((movie) => (
        <Movie movie={movie} key={movie.imdbID} onSelectMovie={onSelectMovie} />
      ))}
    </ul>
  );
}

function Movie({ movie, onSelectMovie }) {
  return (
    <li onClick={() => onSelectMovie(movie.imdbID)}>
      <img src={movie.Poster} alt={`${movie.Title} poster`} />
      <h3>{movie.Title}</h3>
      <div>
        <p>
          <span>üìÖ</span>
          <span>{movie.Year}</span>
        </p>
      </div>
    </li>
  );
}

// function WatchedBox() {
//   const [isOpen2, setIsOpen2] = useState(true);

//   return (
//     <div className="box">
//       <button
//         className="btn-toggle"
//         onClick={() => setIsOpen2((open) => !open)}
//       >
//         {isOpen2 ? "‚Äì" : "+"}
//       </button>
//       {isOpen2 && (
//         <>
//           <WatchedMoviesSummary watched={watched} />
//           <WatchedMoviesList watched={watched} />
//         </>
//       )}
//     </div>
//   );
// }

function MovieDetails({ selectedId, onCloseMovie, onAddWatched, watchedList }) {
  const [movie, setMovie] = useState({});
  const [isLoading, setIsLoading] = useState(false);
  const [userRating, setUserRating] = useState("");

  const countRef = useRef(0);
  // zmiany warto≈õƒái Ref√≥w nie mo≈ºemy robiƒá w render logic, zamiast tego musimy wykorzystaƒá useEfect
  useEffect(
    function () {
      if (userRating) countRef.current++;
    },
    [userRating]
  );

  const isWatched = watchedList
    .map((movie) => movie.imdbID)
    .includes(selectedId);

  const watchedUserRating = watchedList.find(
    (movie) => movie.imdbID === selectedId
  )?.userRating;

  const {
    Actors: actors,
    Director: director,
    Genre: genre,
    Plot: plot,
    Poster: poster,
    Released: released,
    Title: title,
    Year: year,
    Runtime: runtime,
    imdbRating,
  } = movie;

  function handleAdd() {
    const newWatchedMovie = {
      imdbID: selectedId,
      title,
      year,
      poster,
      imdbRating: Number(imdbRating),
      runtime: Number(runtime.split(" ").at(0)),
      userRating,
      countRatingDecision: countRef.current,
    };
    onAddWatched(newWatchedMovie);
    onCloseMovie();
  }

  useKey("Escape", onCloseMovie);

  // poni≈ºszy effect przeniesiony do custom hooka useKey
  // useEffect(
  //   function () {
  //     function callback(e) {
  //       e.code === "Escape" && onCloseMovie();
  //       console.log("closed by escape key");
  //     }

  //     document.addEventListener("keydown", callback);

  //     //cleanup function uzywamy tutaj dlatego ze ka≈ºde "otwarcie" filmu powoduje uruchomienie tego efektu, wiƒôc powstaje nagromadzenie przypiƒôtych eventListener√≥w do body, nawet do film√≥w kt√≥e ju≈º zosta≈Çy zamlniete poprzez otwarcie kolejnego filmu
  //     return function () {
  //       document.removeEventListener("keydown", callback);
  //     };
  //   },
  //   [onCloseMovie]
  // );

  useEffect(
    function () {
      async function getMovieDetails() {
        setIsLoading(true);
        const res = await fetch(
          `http://www.omdbapi.com/?apikey=${KEY}&i=${selectedId}`
        );
        const data = await res.json();
        setMovie(data);
        setIsLoading(false);
      }
      getMovieDetails();
    },
    [selectedId]
  );

  useEffect(
    function () {
      if (!title) return;
      document.title = `MOVIE | ${title}`;

      // cleanup effect function - usuwamy efekt po odmontowaniu komponentu i po ka≈ºdym re-rendrze
      return function () {
        document.title = "usePopcorn";
        console.log("cleanup function");
      };
    },
    [title]
  );

  return (
    <div className="details">
      {isLoading ? (
        <Loader />
      ) : (
        <>
          <header>
            <button className="btn-back" onClick={onCloseMovie}>
              &#x2B05;
            </button>
            <img src={poster} alt={`Poster of ${movie} movie`} />
            <div className="details-overview">
              <h2>{title}</h2>
              <p>
                {released} &bull; {runtime}
              </p>
              <p>{genre}</p>
              <p>
                <span>‚≠ê</span>
                {imdbRating} IMDB rating
              </p>
            </div>
          </header>

          <section>
            <div className="rating">
              {!isWatched ? (
                <>
                  <StarRating
                    maxRating={10}
                    size={24}
                    onExportState={setUserRating}
                  />
                  {userRating > 0 && (
                    <button className="btn-add" onClick={handleAdd}>
                      + Add to list
                    </button>
                  )}
                </>
              ) : (
                <p>You already rated this movie with ‚≠ê{watchedUserRating}</p>
              )}
            </div>
            <p>Directed by: {director}</p>
            <p>Staring: {actors}</p>
            <p>
              <em>{plot}</em>
            </p>
          </section>
        </>
      )}
    </div>
  );
}

function WatchedMoviesSummary({ watched }) {
  const avgImdbRating = average(watched.map((movie) => movie.imdbRating));
  const avgUserRating = average(watched.map((movie) => movie.userRating));
  const avgRuntime = average(watched.map((movie) => movie.runtime));

  return (
    <div className="summary">
      <h2>Movies you watched</h2>
      <div>
        <p>
          <span>#Ô∏è‚É£</span>
          <span>{watched.length} movies</span>
        </p>
        <p>
          <span>‚≠êÔ∏è</span>
          <span>{avgImdbRating.toFixed(2)}</span>
        </p>
        <p>
          <span>üåü</span>
          <span>{avgUserRating.toFixed(2)}</span>
        </p>
        <p>
          <span>‚è≥</span>
          <span>{avgRuntime.toFixed()} min</span>
        </p>
      </div>
    </div>
  );
}

function WatchedMoviesList({ watched, onDeleteWatchedMovie }) {
  return (
    <ul className="list">
      {watched.map((movie) => (
        <WatchedMovie
          movie={movie}
          key={movie.imdbID}
          onDeleteWatchedMovie={onDeleteWatchedMovie}
        />
      ))}
    </ul>
  );
}

function WatchedMovie({ movie, onDeleteWatchedMovie }) {
  return (
    <li>
      <img src={movie.poster} alt={`${movie.title} poster`} />
      <h3>{movie.title}</h3>
      <div>
        <p>
          <span>‚≠êÔ∏è</span>
          <span>{movie.imdbRating}</span>
        </p>
        <p>
          <span>üåü</span>
          <span>{movie.userRating}</span>
        </p>
        <p>
          <span>‚è≥</span>
          <span>{movie.runtime} min</span>
        </p>

        <button
          className="btn-delete"
          onClick={() => onDeleteWatchedMovie(movie.imdbID)}
        >
          X
        </button>
      </div>
    </li>
  );
}
